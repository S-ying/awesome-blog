<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.mirrorming.blog.mapper.generate.RoleMapper">
  <resultMap id="BaseResultMap" type="cn.mirrorming.blog.domain.po.Role">
    <!--@Table `role`-->
    <id column="id" property="id" />
    <result column="company_id" property="companyId" />
    <result column="name" property="name" />
    <result column="value" property="value" />
    <result column="description" property="description" />
    <result column="member_count" property="memberCount" />
    <result column="status" property="status" />
    <result column="sort" property="sort" />
    <result column="is_default" property="isDefault" />
    <result column="create_time" property="createTime" />
    <result column="update_time" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, company_id, `name`, `value`, description, member_count, `status`, sort, is_default, 
    create_time, update_time
  </sql>
  <update id="updateBatch" parameterType="java.util.List">
    update `role`
    <trim prefix="set" suffixOverrides=",">
      <trim prefix="company_id = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.companyId}
        </foreach>
      </trim>
      <trim prefix="`name` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.name}
        </foreach>
      </trim>
      <trim prefix="`value` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.value}
        </foreach>
      </trim>
      <trim prefix="description = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.description}
        </foreach>
      </trim>
      <trim prefix="member_count = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.memberCount}
        </foreach>
      </trim>
      <trim prefix="`status` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.status}
        </foreach>
      </trim>
      <trim prefix="sort = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.sort}
        </foreach>
      </trim>
      <trim prefix="is_default = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.isDefault}
        </foreach>
      </trim>
      <trim prefix="create_time = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.createTime}
        </foreach>
      </trim>
      <trim prefix="update_time = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.updateTime}
        </foreach>
      </trim>
    </trim>
    where id in
    <foreach close=")" collection="list" item="item" open="(" separator=", ">
      #{item.id}
    </foreach>
  </update>
  <update id="updateBatchSelective" parameterType="java.util.List">
    update `role`
    <trim prefix="set" suffixOverrides=",">
      <trim prefix="company_id = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.companyId != null">
            when id = #{item.id} then #{item.companyId}
          </if>
        </foreach>
      </trim>
      <trim prefix="`name` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.name != null">
            when id = #{item.id} then #{item.name}
          </if>
        </foreach>
      </trim>
      <trim prefix="`value` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.value != null">
            when id = #{item.id} then #{item.value}
          </if>
        </foreach>
      </trim>
      <trim prefix="description = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.description != null">
            when id = #{item.id} then #{item.description}
          </if>
        </foreach>
      </trim>
      <trim prefix="member_count = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.memberCount != null">
            when id = #{item.id} then #{item.memberCount}
          </if>
        </foreach>
      </trim>
      <trim prefix="`status` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.status != null">
            when id = #{item.id} then #{item.status}
          </if>
        </foreach>
      </trim>
      <trim prefix="sort = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.sort != null">
            when id = #{item.id} then #{item.sort}
          </if>
        </foreach>
      </trim>
      <trim prefix="is_default = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.isDefault != null">
            when id = #{item.id} then #{item.isDefault}
          </if>
        </foreach>
      </trim>
      <trim prefix="create_time = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.createTime != null">
            when id = #{item.id} then #{item.createTime}
          </if>
        </foreach>
      </trim>
      <trim prefix="update_time = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.updateTime != null">
            when id = #{item.id} then #{item.updateTime}
          </if>
        </foreach>
      </trim>
    </trim>
    where id in
    <foreach close=")" collection="list" item="item" open="(" separator=", ">
      #{item.id}
    </foreach>
  </update>
  <insert id="batchInsert" keyColumn="id" keyProperty="id" parameterType="map" useGeneratedKeys="true">
    insert into `role`
    (company_id, `name`, `value`, description, member_count, `status`, sort, is_default, 
      create_time, update_time)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.companyId}, #{item.name}, #{item.value}, #{item.description}, #{item.memberCount}, 
        #{item.status}, #{item.sort}, #{item.isDefault}, #{item.createTime}, #{item.updateTime}
        )
    </foreach>
  </insert>
  <insert id="insertOrUpdate" keyColumn="id" keyProperty="id" parameterType="cn.mirrorming.blog.domain.po.Role" useGeneratedKeys="true">
    insert into `role`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      company_id,
      `name`,
      `value`,
      description,
      member_count,
      `status`,
      sort,
      is_default,
      create_time,
      update_time,
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id},
      </if>
      #{companyId},
      #{name},
      #{value},
      #{description},
      #{memberCount},
      #{status},
      #{sort},
      #{isDefault},
      #{createTime},
      #{updateTime},
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id},
      </if>
      company_id = #{companyId},
      `name` = #{name},
      `value` = #{value},
      description = #{description},
      member_count = #{memberCount},
      `status` = #{status},
      sort = #{sort},
      is_default = #{isDefault},
      create_time = #{createTime},
      update_time = #{updateTime},
    </trim>
  </insert>
  <insert id="insertOrUpdateSelective" keyColumn="id" keyProperty="id" parameterType="cn.mirrorming.blog.domain.po.Role" useGeneratedKeys="true">
    insert into `role`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="companyId != null">
        company_id,
      </if>
      <if test="name != null">
        `name`,
      </if>
      <if test="value != null">
        `value`,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="memberCount != null">
        member_count,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="sort != null">
        sort,
      </if>
      <if test="isDefault != null">
        is_default,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id},
      </if>
      <if test="companyId != null">
        #{companyId},
      </if>
      <if test="name != null">
        #{name},
      </if>
      <if test="value != null">
        #{value},
      </if>
      <if test="description != null">
        #{description},
      </if>
      <if test="memberCount != null">
        #{memberCount},
      </if>
      <if test="status != null">
        #{status},
      </if>
      <if test="sort != null">
        #{sort},
      </if>
      <if test="isDefault != null">
        #{isDefault},
      </if>
      <if test="createTime != null">
        #{createTime},
      </if>
      <if test="updateTime != null">
        #{updateTime},
      </if>
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id},
      </if>
      <if test="companyId != null">
        company_id = #{companyId},
      </if>
      <if test="name != null">
        `name` = #{name},
      </if>
      <if test="value != null">
        `value` = #{value},
      </if>
      <if test="description != null">
        description = #{description},
      </if>
      <if test="memberCount != null">
        member_count = #{memberCount},
      </if>
      <if test="status != null">
        `status` = #{status},
      </if>
      <if test="sort != null">
        sort = #{sort},
      </if>
      <if test="isDefault != null">
        is_default = #{isDefault},
      </if>
      <if test="createTime != null">
        create_time = #{createTime},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime},
      </if>
    </trim>
  </insert>
  <resultMap id="BaseResultMap" type="cn.mirrorming.blog.domain.po.Role">
    <!--@Table `role`-->
    <id column="id" property="id" />
    <result column="company_id" property="companyId" />
    <result column="name" property="name" />
    <result column="value" property="value" />
    <result column="description" property="description" />
    <result column="member_count" property="memberCount" />
    <result column="status" property="status" />
    <result column="sort" property="sort" />
    <result column="is_default" property="isDefault" />
    <result column="create_time" property="createTime" />
    <result column="update_time" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, company_id, `name`, `value`, description, member_count, `status`, sort, is_default, 
    create_time, update_time
  </sql>
  <update id="updateBatch" parameterType="java.util.List">
    update `role`
    <trim prefix="set" suffixOverrides=",">
      <trim prefix="company_id = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.companyId}
        </foreach>
      </trim>
      <trim prefix="`name` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.name}
        </foreach>
      </trim>
      <trim prefix="`value` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.value}
        </foreach>
      </trim>
      <trim prefix="description = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.description}
        </foreach>
      </trim>
      <trim prefix="member_count = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.memberCount}
        </foreach>
      </trim>
      <trim prefix="`status` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.status}
        </foreach>
      </trim>
      <trim prefix="sort = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.sort}
        </foreach>
      </trim>
      <trim prefix="is_default = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.isDefault}
        </foreach>
      </trim>
      <trim prefix="create_time = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.createTime}
        </foreach>
      </trim>
      <trim prefix="update_time = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.updateTime}
        </foreach>
      </trim>
    </trim>
    where id in
    <foreach close=")" collection="list" item="item" open="(" separator=", ">
      #{item.id}
    </foreach>
  </update>
  <update id="updateBatchSelective" parameterType="java.util.List">
    update `role`
    <trim prefix="set" suffixOverrides=",">
      <trim prefix="company_id = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.companyId != null">
            when id = #{item.id} then #{item.companyId}
          </if>
        </foreach>
      </trim>
      <trim prefix="`name` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.name != null">
            when id = #{item.id} then #{item.name}
          </if>
        </foreach>
      </trim>
      <trim prefix="`value` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.value != null">
            when id = #{item.id} then #{item.value}
          </if>
        </foreach>
      </trim>
      <trim prefix="description = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.description != null">
            when id = #{item.id} then #{item.description}
          </if>
        </foreach>
      </trim>
      <trim prefix="member_count = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.memberCount != null">
            when id = #{item.id} then #{item.memberCount}
          </if>
        </foreach>
      </trim>
      <trim prefix="`status` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.status != null">
            when id = #{item.id} then #{item.status}
          </if>
        </foreach>
      </trim>
      <trim prefix="sort = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.sort != null">
            when id = #{item.id} then #{item.sort}
          </if>
        </foreach>
      </trim>
      <trim prefix="is_default = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.isDefault != null">
            when id = #{item.id} then #{item.isDefault}
          </if>
        </foreach>
      </trim>
      <trim prefix="create_time = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.createTime != null">
            when id = #{item.id} then #{item.createTime}
          </if>
        </foreach>
      </trim>
      <trim prefix="update_time = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.updateTime != null">
            when id = #{item.id} then #{item.updateTime}
          </if>
        </foreach>
      </trim>
    </trim>
    where id in
    <foreach close=")" collection="list" item="item" open="(" separator=", ">
      #{item.id}
    </foreach>
  </update>
  <insert id="batchInsert" keyColumn="id" keyProperty="id" parameterType="map" useGeneratedKeys="true">
    insert into `role`
    (company_id, `name`, `value`, description, member_count, `status`, sort, is_default, 
      create_time, update_time)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.companyId}, #{item.name}, #{item.value}, #{item.description}, #{item.memberCount}, 
        #{item.status}, #{item.sort}, #{item.isDefault}, #{item.createTime}, #{item.updateTime}
        )
    </foreach>
  </insert>
  <insert id="insertOrUpdate" keyColumn="id" keyProperty="id" parameterType="cn.mirrorming.blog.domain.po.Role" useGeneratedKeys="true">
    insert into `role`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      company_id,
      `name`,
      `value`,
      description,
      member_count,
      `status`,
      sort,
      is_default,
      create_time,
      update_time,
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id},
      </if>
      #{companyId},
      #{name},
      #{value},
      #{description},
      #{memberCount},
      #{status},
      #{sort},
      #{isDefault},
      #{createTime},
      #{updateTime},
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id},
      </if>
      company_id = #{companyId},
      `name` = #{name},
      `value` = #{value},
      description = #{description},
      member_count = #{memberCount},
      `status` = #{status},
      sort = #{sort},
      is_default = #{isDefault},
      create_time = #{createTime},
      update_time = #{updateTime},
    </trim>
  </insert>
  <insert id="insertOrUpdateSelective" keyColumn="id" keyProperty="id" parameterType="cn.mirrorming.blog.domain.po.Role" useGeneratedKeys="true">
    insert into `role`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="companyId != null">
        company_id,
      </if>
      <if test="name != null">
        `name`,
      </if>
      <if test="value != null">
        `value`,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="memberCount != null">
        member_count,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="sort != null">
        sort,
      </if>
      <if test="isDefault != null">
        is_default,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id},
      </if>
      <if test="companyId != null">
        #{companyId},
      </if>
      <if test="name != null">
        #{name},
      </if>
      <if test="value != null">
        #{value},
      </if>
      <if test="description != null">
        #{description},
      </if>
      <if test="memberCount != null">
        #{memberCount},
      </if>
      <if test="status != null">
        #{status},
      </if>
      <if test="sort != null">
        #{sort},
      </if>
      <if test="isDefault != null">
        #{isDefault},
      </if>
      <if test="createTime != null">
        #{createTime},
      </if>
      <if test="updateTime != null">
        #{updateTime},
      </if>
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id},
      </if>
      <if test="companyId != null">
        company_id = #{companyId},
      </if>
      <if test="name != null">
        `name` = #{name},
      </if>
      <if test="value != null">
        `value` = #{value},
      </if>
      <if test="description != null">
        description = #{description},
      </if>
      <if test="memberCount != null">
        member_count = #{memberCount},
      </if>
      <if test="status != null">
        `status` = #{status},
      </if>
      <if test="sort != null">
        sort = #{sort},
      </if>
      <if test="isDefault != null">
        is_default = #{isDefault},
      </if>
      <if test="createTime != null">
        create_time = #{createTime},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime},
      </if>
    </trim>
  </insert>
  <resultMap id="BaseResultMap" type="cn.mirrorming.blog.domain.po.Role">
    <!--@Table `role`-->
    <id column="id" property="id" />
    <result column="company_id" property="companyId" />
    <result column="name" property="name" />
    <result column="value" property="value" />
    <result column="description" property="description" />
    <result column="member_count" property="memberCount" />
    <result column="status" property="status" />
    <result column="sort" property="sort" />
    <result column="is_default" property="isDefault" />
    <result column="create_time" property="createTime" />
    <result column="update_time" property="updateTime" />
    <result column="module" property="module" />
  </resultMap>
  <sql id="Base_Column_List">
    id, company_id, `name`, `value`, description, member_count, `status`, sort, is_default, 
    create_time, update_time, `module`
  </sql>
  <update id="updateBatch" parameterType="java.util.List">
    update `role`
    <trim prefix="set" suffixOverrides=",">
      <trim prefix="company_id = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.companyId}
        </foreach>
      </trim>
      <trim prefix="`name` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.name}
        </foreach>
      </trim>
      <trim prefix="`value` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.value}
        </foreach>
      </trim>
      <trim prefix="description = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.description}
        </foreach>
      </trim>
      <trim prefix="member_count = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.memberCount}
        </foreach>
      </trim>
      <trim prefix="`status` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.status}
        </foreach>
      </trim>
      <trim prefix="sort = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.sort}
        </foreach>
      </trim>
      <trim prefix="is_default = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.isDefault}
        </foreach>
      </trim>
      <trim prefix="create_time = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.createTime}
        </foreach>
      </trim>
      <trim prefix="update_time = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.updateTime}
        </foreach>
      </trim>
      <trim prefix="`module` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when id = #{item.id} then #{item.module}
        </foreach>
      </trim>
    </trim>
    where id in
    <foreach close=")" collection="list" item="item" open="(" separator=", ">
      #{item.id}
    </foreach>
  </update>
  <update id="updateBatchSelective" parameterType="java.util.List">
    update `role`
    <trim prefix="set" suffixOverrides=",">
      <trim prefix="company_id = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.companyId != null">
            when id = #{item.id} then #{item.companyId}
          </if>
        </foreach>
      </trim>
      <trim prefix="`name` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.name != null">
            when id = #{item.id} then #{item.name}
          </if>
        </foreach>
      </trim>
      <trim prefix="`value` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.value != null">
            when id = #{item.id} then #{item.value}
          </if>
        </foreach>
      </trim>
      <trim prefix="description = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.description != null">
            when id = #{item.id} then #{item.description}
          </if>
        </foreach>
      </trim>
      <trim prefix="member_count = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.memberCount != null">
            when id = #{item.id} then #{item.memberCount}
          </if>
        </foreach>
      </trim>
      <trim prefix="`status` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.status != null">
            when id = #{item.id} then #{item.status}
          </if>
        </foreach>
      </trim>
      <trim prefix="sort = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.sort != null">
            when id = #{item.id} then #{item.sort}
          </if>
        </foreach>
      </trim>
      <trim prefix="is_default = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.isDefault != null">
            when id = #{item.id} then #{item.isDefault}
          </if>
        </foreach>
      </trim>
      <trim prefix="create_time = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.createTime != null">
            when id = #{item.id} then #{item.createTime}
          </if>
        </foreach>
      </trim>
      <trim prefix="update_time = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.updateTime != null">
            when id = #{item.id} then #{item.updateTime}
          </if>
        </foreach>
      </trim>
      <trim prefix="`module` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.module != null">
            when id = #{item.id} then #{item.module}
          </if>
        </foreach>
      </trim>
    </trim>
    where id in
    <foreach close=")" collection="list" item="item" open="(" separator=", ">
      #{item.id}
    </foreach>
  </update>
  <insert id="batchInsert" keyColumn="id" keyProperty="id" parameterType="map" useGeneratedKeys="true">
    insert into `role`
    (company_id, `name`, `value`, description, member_count, `status`, sort, is_default, 
      create_time, update_time, `module`)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.companyId}, #{item.name}, #{item.value}, #{item.description}, #{item.memberCount}, 
        #{item.status}, #{item.sort}, #{item.isDefault}, #{item.createTime}, #{item.updateTime}, 
        #{item.module})
    </foreach>
  </insert>
  <insert id="insertOrUpdate" keyColumn="id" keyProperty="id" parameterType="cn.mirrorming.blog.domain.po.Role" useGeneratedKeys="true">
    insert into `role`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      company_id,
      `name`,
      `value`,
      description,
      member_count,
      `status`,
      sort,
      is_default,
      create_time,
      update_time,
      `module`,
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id},
      </if>
      #{companyId},
      #{name},
      #{value},
      #{description},
      #{memberCount},
      #{status},
      #{sort},
      #{isDefault},
      #{createTime},
      #{updateTime},
      #{module},
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id},
      </if>
      company_id = #{companyId},
      `name` = #{name},
      `value` = #{value},
      description = #{description},
      member_count = #{memberCount},
      `status` = #{status},
      sort = #{sort},
      is_default = #{isDefault},
      create_time = #{createTime},
      update_time = #{updateTime},
      `module` = #{module},
    </trim>
  </insert>
  <insert id="insertOrUpdateSelective" keyColumn="id" keyProperty="id" parameterType="cn.mirrorming.blog.domain.po.Role" useGeneratedKeys="true">
    insert into `role`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="companyId != null">
        company_id,
      </if>
      <if test="name != null">
        `name`,
      </if>
      <if test="value != null">
        `value`,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="memberCount != null">
        member_count,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="sort != null">
        sort,
      </if>
      <if test="isDefault != null">
        is_default,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="module != null">
        `module`,
      </if>
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id},
      </if>
      <if test="companyId != null">
        #{companyId},
      </if>
      <if test="name != null">
        #{name},
      </if>
      <if test="value != null">
        #{value},
      </if>
      <if test="description != null">
        #{description},
      </if>
      <if test="memberCount != null">
        #{memberCount},
      </if>
      <if test="status != null">
        #{status},
      </if>
      <if test="sort != null">
        #{sort},
      </if>
      <if test="isDefault != null">
        #{isDefault},
      </if>
      <if test="createTime != null">
        #{createTime},
      </if>
      <if test="updateTime != null">
        #{updateTime},
      </if>
      <if test="module != null">
        #{module},
      </if>
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id},
      </if>
      <if test="companyId != null">
        company_id = #{companyId},
      </if>
      <if test="name != null">
        `name` = #{name},
      </if>
      <if test="value != null">
        `value` = #{value},
      </if>
      <if test="description != null">
        description = #{description},
      </if>
      <if test="memberCount != null">
        member_count = #{memberCount},
      </if>
      <if test="status != null">
        `status` = #{status},
      </if>
      <if test="sort != null">
        sort = #{sort},
      </if>
      <if test="isDefault != null">
        is_default = #{isDefault},
      </if>
      <if test="createTime != null">
        create_time = #{createTime},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime},
      </if>
      <if test="module != null">
        `module` = #{module},
      </if>
    </trim>
  </insert>
</mapper>